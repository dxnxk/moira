// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/notifier (interfaces: Scheduler)

package mock_scheduler

import (
	gomock "github.com/golang/mock/gomock"
	moira_alert "github.com/moira-alert/moira"
	time "time"
)

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return _m.recorder
}

// ScheduleNotification mocks base method
func (_m *MockScheduler) ScheduleNotification(_param0 time.Time, _param1 moira_alert.NotificationEvent, _param2 moira_alert.TriggerData, _param3 moira_alert.ContactData, _param4 bool, _param5 int) *moira_alert.ScheduledNotification {
	ret := _m.ctrl.Call(_m, "ScheduleNotification", _param0, _param1, _param2, _param3, _param4, _param5)
	ret0, _ := ret[0].(*moira_alert.ScheduledNotification)
	return ret0
}

// ScheduleNotification indicates an expected call of ScheduleNotification
func (_mr *MockSchedulerMockRecorder) ScheduleNotification(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScheduleNotification", arg0, arg1, arg2, arg3, arg4, arg5)
}
